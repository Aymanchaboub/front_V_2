import { Component, NgModule, OnInit } from '@angular/core';
import { Commande } from '../model/commande';
import { CommandeService } from '../_services/commande.service';
import { CommonModule } from '@angular/common';
import { forkJoin } from 'rxjs';
import { StorageService } from '../_services/storage.service';
import { CartitemService } from '../_services/cartitem.service';
import { LignecommandeService } from '../_services/lignecommande.service';
import { Lignecommande } from '../model/lignecommande';
import { Router } from '@angular/router';

@Component({
  selector: 'app-livreur',
  templateUrl: './livreur.component.html',
  styleUrls: ['./livreur.component.css','./bootstrap.min.css','./style1.css','./style.css',  './fontawesome-all.css', './chartist.css','./morris.css','./c3.css','./flag-icon.min.css']
})
export class LivreurComponent implements OnInit {
  commandes: Commande[] = [];
  usernames: string[] = [];
  email: string[] = [];
  dates: Date[] = [];
  totalCartValue: number = 0;
  selectedCommandes!:boolean
  ligneCommande:Lignecommande[]=[];




  constructor(private commandeService: CommandeService,private router:Router,    private storageService: StorageService,private ligneCommandeService:LignecommandeService,
    private cartItemService: CartitemService) {}

  ngOnInit(): void {


    this.commandeService.getAllCommandes().subscribe(
      data => {
        this.commandes = data;
        
        console.log("commandes", this.commandes);
  
        // create an array of Observables, one for each user's name
        const nameObservables = this.commandes.map(commande => {
          this.cartItemService.getTotal(commande.user).subscribe(totalValue => {
            this.totalCartValue = totalValue;
          });
          return this.commandeService.getNomByUserid(commande.user);
        });
        
  
        // wait for all observables to complete using forkJoin
        forkJoin(nameObservables).subscribe(names => {
          // push the names to the usernames array in the correct order
          this.usernames = names.map(name => name['nom']);
          console.log(this.usernames);
        });

        const dateObservables = this.commandes.map(commande => {
          return this.commandeService.getDateCreationById(commande.id);
        });
        forkJoin(dateObservables).subscribe(dates => {
          // push the dates to the dates array in the correct order
          this.dates = dates;
          console.log(this.dates);
        });
      }
    );
    
  }
  onChoisir(index: number): void {
    const livreurId = this.storageService.getUser()?.id;
    ; // replace with actual livreur id
    const commandeId = this.commandes[index].id;
  
    const newLigneCommande: Lignecommande = {
      id: 0, // this will be generated by the server
      commandeId: commandeId,
      livreurId: livreurId,
      isComplete: false
    };
  
    console.log(commandeId)
  
    this.ligneCommandeService.createLigneCommande(newLigneCommande, commandeId, livreurId)
      .subscribe(
        ligneCommande => console.log('Ligne commande créée : ', ligneCommande, 'newlignecommande', newLigneCommande),
        error => console.error('Erreur lors de la création de la ligne commande : ', error)
      );
      this.router.navigate(['/iscomplete'])
  }
  

  
}
  

@NgModule({
  declarations: [LivreurComponent],
  imports: [CommonModule],
})
export class LivreurModule {}
